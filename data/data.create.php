<?php
/**
 * 可制作道具列表生成函数
 * 
 * 功能说明：
 * 1. 返回游戏中所有可制作道具的ID列表
 * 2. 按武器类型分类组织道具列表
 * 3. 使用硬编码方式维护制作配方系统
 * 
 * 参数说明：
 * @param object $user 用户对象（当前未使用，保留扩展性）
 * 
 * 返回说明：
 * @return array 包含所有可制作道具ID的数组
 * 
 * 道具分类说明：
 * 1. 剑类武器：单手剑系列（1000-1008,1020,1022,1023）
 * 2. 双手剑：大型剑系列（1100-1104,1120）
 * 3. 短剑：匕首类武器（1201-1205,1220）
 * 4. 法杖：法师武器（1700-1706）
 * 5. 双手杖：大型法杖（1800-1803,1810-1812）
 * 6. 弓：远程武器（2000-2006,2020）
 * 7. 鞭：特殊武器（2200-2203,2210-2211）
 * 8. 盾：防御装备（3000-3008）
 * 9. 书：法术书（3101-3105）
 * 10. 铠甲：重甲（5000-5009）
 * 11. 服装：轻甲（5100-5107）
 * 12. 法袍：布甲（5200-5206）
 * 
 * 注意事项：
 * 1. 当前采用硬编码方式实现，未来可扩展为动态加载
 * 2. 函数参数$user暂未使用，保留用于后续权限检查
 */
function CanCreate($user) {

/*	// ※表示に時間かかる 
	// 自动获取所有项目数据中被设定为need的项目
	for($i=1000; $i<10000; $i++) {
		$item	= LoadItemData($i);
		if(!$item) continue;
		if($item["need"])
			$create[]	= $i;
	}
	return $create;
*/
	// 剑
	$create	= array(1000,1001,1002,1003,1004,1005,1006,1007,1008,1020,1022,1023);
	// 双手剑
	$create	= array_merge($create,
	array(1100,1101,1102,1103,1104,1120)
	);
	// 短剑
	$create	= array_merge($create,
	array(1201,1202,1203,1204,1205,1220,)
	);
	// 杖
	$create	= array_merge($create,
	array(1700,1701,1702,1703,1704,1705,1706,)
	);
	// 双手杖
	$create	= array_merge($create,
	array(1800,1801,1802,1803,1810,1811,1812,)
	);
	// 弓
	$create	= array_merge($create,
	array(2000,2001,2002,2003,2004,2005,2006,2020,)
	);
	// 鞭
	$create	= array_merge($create,
	array(2200,2201,2202,2203,2210,2211,)
	);
	// 盾
	$create	= array_merge($create,
	array(3000,3001,3002,3003,3004,3005,3006,3007,3008,)
	);
	// 本
	$create	= array_merge($create,
	array(3101,3102,3103,3104,3105,)
	);
	// 铠
	$create	= array_merge($create,
	array(5000,5001,5002,5003,5004,5005,5007,5008,5009,)
	);
	// 服
	$create	= array_merge($create,
	array(5100,5101,5102,5103,5104,5105,5106,5107,)
	);
	// 衣
	$create	= array_merge($create,
	array(5200,5201,5202,5203,5204,5205,5206,)
	);
	return $create;
}

/**
 * 制作材料检查函数
 * 
 * 功能说明：
 * 1. 验证用户是否拥有足够材料制作指定道具
 * 2. 检查道具的合成需求是否满足
 * 
 * 参数说明：
 * @param array $item 目标道具数据
 *   - 必须包含'need'键：材料需求数组（材料ID => 需求数量）
 * @param array $UserItem 用户当前道具库存
 *   - 格式：道具ID => 持有数量
 * 
 * 返回说明：
 * @return bool 是否满足制作条件
 *   - true: 材料充足
 *   - false: 材料不足或道具不可制作
 * 
 * 处理逻辑：
 * 1. 检查用户道具数据是否存在
 * 2. 验证道具是否可制作（need字段存在）
 * 3. 遍历所有需求材料，检查库存数量
 * 4. 任一材料不足即返回false
 */
function HaveNeeds($item,$UserItem) {
	// 没有道具的情况
	if(!$UserItem) return false;
	// 对象到不不能做成情况下
	if(!$item["need"]) return false;
	foreach($item["need"] as $NeedNo => $Amount) {
		if($UserItem[$NeedNo] < $Amount)
			return false;
	}
	return true;
}

/**
 * 道具能力可能性生成函数
 * 
 * 功能说明：
 * 1. 根据道具类型返回可能附加的能力属性
 * 2. 将能力属性分为低级和高级两个档次
 * 3. 支持武器类和防具类道具的能力生成
 * 
 * 参数说明：
 * @param string $type 道具类型
 *   - 武器类："剑","双手剑","匕首","魔杖","杖","弓","鞭"
 *   - 防具类："盾","书","甲","衣服","长袍"
 * 
 * 返回说明：
 * @return array 包含两个数组的数组
 *   - [0]: 低级能力属性数组
 *   - [1]: 高级能力属性数组
 * 
 * 能力属性分类：
 * 1. 武器类可能属性：
 *   - 攻击力增加(Atk+)
 *   - 魔法攻击力增加(Matk+)
 *   - 攻击力百分比(Atk*)
 *   - 魔法攻击力百分比(Matk*)
 *   - 生命值增加(HP+)
 *   - 生命值百分比(HP*)
 *   - 法力值增加(SP+)
 *   - 法力值百分比(SP*)
 *   - 力量增加(STR+)
 *   - 智力增加(INT+)
 *   - 敏捷增加(DEX+)
 *   - 速度增加(SPD+)
 *   - 幸运增加(LUK+)
 * 
 * 2. 防具类可能属性：
 *   - 防御力增加(Def+)
 *   - 魔法防御力增加(Mdef+)
 *   - 其他属性同武器类
 * 
 * 注意事项：
 * 1. 能力属性使用简写代码表示（如100代表攻击力+1）
 * 2. 具体数值范围由游戏系统定义
 */
function ItemAbilityPossibility($type) {
	switch($type) {
		case "剑":
		case "双手剑":
		case "匕首":
		case "魔杖":
		case "杖":
		case "弓":
		case "鞭":
			$low	= array(
			// Atk+
			100,101,102,103,104,
			105,106,107,108,109,
			// Matk+
			150,151,152,153,154,
			155,156,157,158,159,
			// Atk*
			200,201,
			// Matk*
			250,251,
			// HP+
			H00,H01,H02,
			// HP*
			HM0,HM1,HM2,
			// SP+
			S00,S01,
			// SP*
			SM0,SM1,SM2,
			// STR+
			P00,P01,P02,P03,P04,
			// INT+
			I00,I01,I02,I03,I04,
			// DEX+
			D00,D01,D02,D03,D04,
			// SPD+
			A00,A01,A02,A03,A04,
			// LUK+
			L00,L01,L02,L03,L04,
			);
			$high	= array(
			// Atk+
			110,111,112,113,114,
			115,116,117,118,119,
			// Matk+
			160,161,162,163,164,
			165,166,167,168,169,
			// Atk*
			202,203,
			// Matk*
			252,253,
			// HP+
			H03,H04,H05,
			// HP*
			HM3,HM4,HM5,
			// SP+
			S02,S03,
			// SP*
			SM3,SM4,SM5,
			// STR+
			P05,P06,P07,P08,P09,
			// INT+
			I05,I06,I07,I08,I09,
			// DEX+
			D05,D06,D07,D08,D09,
			// SPD+
			A05,A06,A07,A08,A09,
			// LUK+
			L05,L06,L07,L08,L09,
			);
			break;
		case "盾":
		case "书":
		case "甲":
		case "衣服":
		case "长袍":
			$low	= array(
			// Def +
			300,301,
			// Mdef +
			350,351,
			// HP+
			H00,H01,H02,
			// HP*
			HM0,HM1,HM2,
			// SP+
			S00,S01,
			// SP*
			SM0,SM1,SM2,
			// STR+
			P00,P01,P02,P03,P04,
			// INT+
			I00,I01,I02,I03,I04,
			// DEX+
			D00,D01,D02,D03,D04,
			// SPD+
			A00,A01,A02,A03,A04,
			// LUK+
			L00,L01,L02,L03,L04,
			);
			$high	= array(
			// Def +
			302,303,304,
			// Mdef +
			352,353,354,
			// HP+
			H03,H04,H05,
			// HP*
			HM3,HM4,HM5,
			// SP+
			S02,S03,
			// SP*
			SM3,SM4,SM5,
			// STR+
			P05,P06,P07,P08,P09,
			// INT+
			I05,I06,I07,I08,I09,
			// DEX+
			D05,D06,D07,D08,D09,
			// SPD+
			A05,A06,A07,A08,A09,
			// LUK+
			L05,L06,L07,L08,L09,
			);
			break;
	}
	return array($low,$high);
}
?>